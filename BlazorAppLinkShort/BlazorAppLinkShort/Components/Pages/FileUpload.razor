@page "/fileupload"
@inject HttpClient Http
@inject NavigationManager NavigationManager



<h3>Upload de Arquivo</h3>

<input type="file" @onchange="OnInputFileChange" />
<button @onclick="UploadFile" disabled="@(!isFileSelected)">Enviar</button>

@if (uploadSuccess)
{
    <p>Arquivo enviado com sucesso!</p>
    <input type="text" @bind="fileCode" placeholder="Insira o código do arquivo" />
    <button @onclick="DownloadFile">Baixar Arquivo</button>
}

@if (uploadError)
{
    <p>Erro ao enviar o arquivo.</p>
}

@if (downloadError)
{
    <p>Erro ao baixar o arquivo.</p>
}

@code {
    private IBrowserFile selectedFile;
    private bool isFileSelected = false;
    private string fileCode;
    private bool uploadSuccess = false;
    private bool uploadError = false;
    private bool downloadError = false;

    // Método chamado quando um arquivo é selecionado
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles(1).FirstOrDefault();
        isFileSelected = selectedFile != null;
    }

    // Método para enviar o arquivo
    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            try
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10_000_000)); // Ajuste o tamanho se necessário
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "file", selectedFile.Name);

                var response = await Http.PostAsync("v1/download/upload", content); 

                if (response.IsSuccessStatusCode)
                {
                    uploadSuccess = true;
                    uploadError = false;
                }
                else
                {
                    uploadError = true;
                    uploadSuccess = false;
                }
            }
            catch
            {
                uploadError = true;
                uploadSuccess = false;
            }
        }
    }

    // Método para baixar o arquivo usando o código
    private async Task DownloadFile()
    {
        try
        {
            var response = await Http.GetAsync($"UploadFile/download/{fileCode}"); 
            if (response.IsSuccessStatusCode)
            {
                var fileUrl = await response.Content.ReadAsStringAsync(); // Isso deve retornar a URL do arquivo
                NavigationManager.NavigateTo(fileUrl, true); // Redireciona para a URL do arquivo para download
            }
            else
            {
                downloadError = true;
            }
        }
        catch
        {
            downloadError = true;
        }
    }
}
