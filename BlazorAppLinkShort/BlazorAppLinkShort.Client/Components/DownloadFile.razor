@rendermode InteractiveWebAssembly
@page "/filedownload"
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<PageTitle>Download de Arquivo</PageTitle>

<h1 class="text-center text-primary p-5">Download de Arquivos</h1>

<form @onsubmit="HandleFileDownload">
    <label for="fileCodes">Insira o código do arquivo:</label>
    <h4>Caso seja mais 1 (um) arquivo, por favor insira separados por uma vírgula. ","</h4>
    <input type="text" id="fileCodes" @bind="fileCodes" required />

    <button class="btn btn-outline-primary">Baixar Arquivo (s)</button>
</form>

@if (!string.IsNullOrEmpty(DownloadMessage))
{
    <p>@DownloadMessage</p>
}

@code {
    private string? fileCodes;
    private string? DownloadMessage;

    private async Task HandleFileDownload()
    {
        if (!string.IsNullOrEmpty(fileCodes))
        {
            var codes = fileCodes.Split(',').Select(c => c.Trim()).ToList();
            
            //The files are not being passed in a list, as the integration with Javascript needed to be done.

            foreach (var code in codes)
            {
                var response = $"https://localhost:7095/v1/download?code={code}";
                
                //JsRuntime is the library the javascript that supports c#: https://learn.microsoft.com/pt-br/dotnet/api/microsoft.jsinterop.jsruntimeextensions.invokevoidasync?view=aspnetcore-8.0
                await JSRuntime.InvokeVoidAsync("downloadFile", response);
            }

            DownloadMessage = $"Solicitação de download para os arquivos com códigos: {string.Join(", ", codes)}.";
        }
        else
        {
            DownloadMessage = "Por favor, insira pelo menos um código de arquivo válido.";
        }
    }


        
   
}

